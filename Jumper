# import for random number
import random


# class 1 to store words list
class Word:
    # init method
    def __init__(self):
        # words list
        self.wordlist = ["apple", "hello", "swimming", "dancing", "laptop",
                         "computer", "window", "curtain", "oange", "fan"]
        # total words in the list
        self.wordCount = 10

    # randomly get a word from the list
    def getRandomWord(self):
        # generate random index within the range of word list
        i = random.randint(0, self.wordCount - 1)
        # return the word at the index
        return self.wordlist[i]


# class 2 to manage jumper image
class Jumper:
    # init method
    def __init__(self):
        # jumper image stored in a list
        self.jumper = ["  ___ ",
                       " /___\ ",
                       "  \ / ",
                       "  \ / ",
                       "   0 ",
                       "  /|\ ",
                       "  / \ ",
                       " ",
                       "^^^^^^^"]

    # print jumper diagram
    def draw(self):
        for line in self.jumper:
            print(line)

    # update for a wrong guess
    def reduce(self):
        self.jumper = self.jumper[1:]  # remove 0th row of jumper image
        if len(self.jumper) == 5:
            self.jumper[0] = " X ";

    # check if exhausted all wrong guess
    def finished(self):
        if len(self.jumper) == 5:  # jumper image list has only 5 rows
            return True  # game over
        else:
            return False  # game not over


# class 3 to manage user inputs
class Console:
    # get a guessed letter from user
    def getUserGuess(self):
        letter = input("Guess a letter [a - z]: ")  # get letter
        return letter  # return letter


# class 4 to manage the game
class Game:
    # init game
    def __init__(self):
        self.words = Word()  # create word object
        self.jumper = Jumper()  # create Jumper object
        self.console = Console()  # create Console object

        self.word = self.words.getRandomWord()  # int with a random word
        self._guess = ""  # init guessed word as empty

        for i in range(len(self.word)):
            self._guess += "-"  # fill guessed word all '-' character
        self.finished = False  # set as game not over

    # make a guess
    def play(self):
        print("\n" + self._guess)  # print current guessed word
        self.jumper.draw()  # print jumper diagram
        if not self.finished:  # not finished the game
            guessLetter = self.console.getUserGuess()  # get a letter
        changed = self.updateGuess(guessLetter)  # check for correctness
        if not changed:  # wrong guess
            self.jumper.reduce()  # update jumper image

    # check for correctness of guess
    def updateGuess(self, guessLetter):
        changed = False  # assume as wrong guess
        for i in range(len(self.word)):  # match with all letters of word
            if self.word[i] == guessLetter and self._guess[i] == "-":
                # there is a character match
                self._guess = self._guess[0:i] + guessLetter + self._guess[i + 1:]
                changed = True  # indicate as a correct guess
                return changed  # return the status

    # check if the game over
    def isFinished(self):
        self.finished = True  # assume that game is over
        for i in range(len(self._guess)):  # check if all letters guessed
            if self._guess[i] == '-':  # atleast one letter not guessed
                self.finished = False  # set as game is not over
            if self.finished or self.jumper.finished():
                # exhausted all incorrect guesses
                self.finished = True  # mark as geme over
                return True  # return game over
            else:
                return False  # return game not over

    # reveal the correct word to the user
    def reveal(self):
        print("Correct Word: " + self.word)


# EXECUTION STARTS HERE

game = Game()  # create a Game object

while not game.isFinished():  # loop until the game finished
    game.play()  # play

game.play()  # play
game.reveal()  # reveal the correct word
